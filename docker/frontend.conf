# Upstream para API Backend
upstream api_backend {
    server api:8000;
    keepalive 32;
}

# Rate limiting
limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/m;

server {
    listen 80;
    server_name _;
    root /usr/share/nginx/html;
    index index.html;

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    # Security headers
    add_header X-App-Version "V5" always;
    add_header X-Build-Time "$msec" always;

    # Feature flag endpoint para JavaScript
    location = /api/feature-flags {
        proxy_pass http://api_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Cache feature flags por 5 minutos
        proxy_cache_valid 200 5m;
        add_header X-Cache-Status $upstream_cache_status;
    }

    # API Proxy
    location /api/ {
        limit_req zone=api burst=50 nodelay;
        
        proxy_pass http://api_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeouts
        proxy_connect_timeout 5s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # Auth endpoints con rate limiting más estricto
    location ~ ^/api/(auth|login|register) {
        limit_req zone=auth burst=10 nodelay;
        proxy_pass http://api_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Legacy application routing
    location /legacy/ {
        alias /usr/share/nginx/html/legacy/;
        try_files $uri $uri/ /legacy/index.html;
        
        # Legacy app headers
        add_header X-App-Version "Legacy" always;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
    }

    # V5 Static assets with aggressive caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-App-Version "V5" always;
        
        # CORS for fonts and assets
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin '*';
            add_header Access-Control-Allow-Methods 'GET, OPTIONS';
            add_header Access-Control-Allow-Headers 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            add_header Content-Length 0;
            add_header Content-Type 'text/plain; charset=utf-8';
            return 204;
        }
    }

    # Feature flag routing logic (server-side)
    location @legacy_fallback {
        rewrite ^(.*)$ /legacy$1 last;
    }

    # Main V5 application (SPA routing)
    location / {
        try_files $uri $uri/ /index.html;
        
        # Feature flag check para routing condicional
        # Este header será procesado por JavaScript en el cliente
        add_header X-Feature-Flags-Check "true" always;
        
        # Cache control para SPA
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;
    }

    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /404.html {
        internal;
    }
    
    location = /50x.html {
        internal;
    }
}