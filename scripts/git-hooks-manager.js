#!/usr/bin/env node

/**
 * Git Hooks Manager - Boukii Admin V5
 * 
 * Manages Git hooks installation, validation, and troubleshooting
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

class GitHooksManager {
  constructor() {
    this.projectRoot = process.cwd();
    this.huskyDir = path.join(this.projectRoot, '.husky');
    this.hooks = [
      'pre-commit',
      'commit-msg', 
      'prepare-commit-msg',
      'post-commit'
    ];
  }

  /**
   * Main execution method
   */
  async run() {
    const command = process.argv[2];
    
    console.log('üé£ Boukii Git Hooks Manager v1.0.0\n');
    
    try {
      switch (command) {
        case 'install':
          await this.installHooks();
          break;
        case 'validate':
          await this.validateHooks();
          break;
        case 'test':
          await this.testHooks();
          break;
        case 'status':
          await this.showStatus();
          break;
        default:
          this.showHelp();
      }
    } catch (error) {
      console.error('‚ùå Git hooks operation failed:', error.message);
      process.exit(1);
    }
  }

  /**
   * Install and configure Git hooks
   */
  async installHooks() {
    console.log('üîß Installing Git hooks...\n');

    // Check if Husky is properly configured
    if (!fs.existsSync(this.huskyDir)) {
      console.log('üì¶ Initializing Husky...');
      execSync('npx husky init', { cwd: this.projectRoot });
    }

    // Validate hook files
    console.log('üìã Validating hook files...');
    let allValid = true;

    for (const hook of this.hooks) {
      const hookPath = path.join(this.huskyDir, hook);
      if (fs.existsSync(hookPath)) {
        console.log(`  ‚úÖ ${hook} - exists`);
        
        // Make executable
        try {
          execSync(`chmod +x "${hookPath}"`, { cwd: this.projectRoot });
          console.log(`  üîì ${hook} - made executable`);
        } catch (error) {
          console.log(`  ‚ö†Ô∏è ${hook} - failed to make executable: ${error.message}`);
        }
      } else {
        console.log(`  ‚ùå ${hook} - missing`);
        allValid = false;
      }
    }

    // Test lint-staged configuration
    console.log('\nüé® Testing lint-staged configuration...');
    try {
      execSync('npx lint-staged --version', { stdio: 'pipe', cwd: this.projectRoot });
      console.log('  ‚úÖ lint-staged is available');
    } catch (error) {
      console.log('  ‚ùå lint-staged not found');
      allValid = false;
    }

    // Test commitlint configuration
    console.log('\nüí¨ Testing commitlint configuration...');
    try {
      execSync('npx commitlint --version', { stdio: 'pipe', cwd: this.projectRoot });
      console.log('  ‚úÖ commitlint is available');
      
      // Check for config file
      const commitlintConfig = path.join(this.projectRoot, 'commitlint.config.js');
      if (fs.existsSync(commitlintConfig)) {
        console.log('  ‚úÖ commitlint.config.js found');
      } else {
        console.log('  ‚ö†Ô∏è commitlint.config.js not found');
      }
    } catch (error) {
      console.log('  ‚ùå commitlint not found');
      allValid = false;
    }

    console.log('\n' + '='.repeat(50));
    if (allValid) {
      console.log('üéâ Git hooks installation completed successfully!');
      console.log('\nüí° Next steps:');
      console.log('  ‚Ä¢ Test hooks: npm run hooks:test');
      console.log('  ‚Ä¢ Make a test commit to verify setup');
    } else {
      console.log('‚ö†Ô∏è Git hooks installation completed with warnings');
      console.log('\nüí° To fix issues:');
      console.log('  ‚Ä¢ Run: npm run hooks:validate');
      console.log('  ‚Ä¢ Check missing hook files');
    }
  }

  /**
   * Validate existing hooks
   */
  async validateHooks() {
    console.log('üîç Validating Git hooks...\n');

    let issuesFound = 0;

    // Check if .git directory exists
    if (!fs.existsSync(path.join(this.projectRoot, '.git'))) {
      console.log('‚ùå Not a Git repository');
      return;
    }

    // Check Husky installation
    console.log('üì¶ Checking Husky installation...');
    if (fs.existsSync(this.huskyDir)) {
      console.log('  ‚úÖ .husky directory exists');
    } else {
      console.log('  ‚ùå .husky directory missing');
      issuesFound++;
    }

    // Check individual hooks
    console.log('\nüé£ Checking hook files...');
    for (const hook of this.hooks) {
      const hookPath = path.join(this.huskyDir, hook);
      
      if (fs.existsSync(hookPath)) {
        const stats = fs.statSync(hookPath);
        const isExecutable = (stats.mode & parseInt('111', 8)) !== 0;
        
        console.log(`  ‚úÖ ${hook} - exists ${isExecutable ? '(executable)' : '(not executable)'}`);
        
        if (!isExecutable) {
          console.log(`    ‚ö†Ô∏è Making ${hook} executable...`);
          try {
            execSync(`chmod +x "${hookPath}"`, { cwd: this.projectRoot });
            console.log(`    ‚úÖ ${hook} is now executable`);
          } catch (error) {
            console.log(`    ‚ùå Failed to make ${hook} executable`);
            issuesFound++;
          }
        }
      } else {
        console.log(`  ‚ùå ${hook} - missing`);
        issuesFound++;
      }
    }

    // Check dependencies
    console.log('\nüì¶ Checking dependencies...');
    const dependencies = [
      { name: 'husky', command: 'npx husky --version' },
      { name: 'lint-staged', command: 'npx lint-staged --version' },
      { name: 'commitlint', command: 'npx commitlint --version' }
    ];

    for (const dep of dependencies) {
      try {
        execSync(dep.command, { stdio: 'pipe', cwd: this.projectRoot });
        console.log(`  ‚úÖ ${dep.name} - available`);
      } catch (error) {
        console.log(`  ‚ùå ${dep.name} - not available`);
        issuesFound++;
      }
    }

    console.log('\n' + '='.repeat(50));
    if (issuesFound === 0) {
      console.log('üéâ All Git hooks are properly configured!');
    } else {
      console.log(`‚ö†Ô∏è Found ${issuesFound} issues that need attention`);
      console.log('\nüí° To fix issues:');
      console.log('  ‚Ä¢ Run: npm run hooks:install');
      console.log('  ‚Ä¢ Install missing dependencies');
    }
  }

  /**
   * Test hooks without making commits
   */
  async testHooks() {
    console.log('üß™ Testing Git hooks...\n');

    // Test lint-staged
    console.log('üé® Testing lint-staged...');
    try {
      execSync('npx lint-staged --help', { stdio: 'pipe', cwd: this.projectRoot });
      console.log('  ‚úÖ lint-staged command works');
    } catch (error) {
      console.log('  ‚ùå lint-staged test failed');
    }

    // Test commitlint with sample messages
    console.log('\nüí¨ Testing commitlint...');
    const testMessages = [
      { msg: 'feat: add new feature', valid: true },
      { msg: 'fix: resolve bug issue', valid: true },
      { msg: 'invalid commit message', valid: false },
      { msg: 'feat!: breaking change', valid: true }
    ];

    for (const test of testMessages) {
      try {
        execSync(`echo "${test.msg}" | npx commitlint`, { 
          stdio: 'pipe', 
          cwd: this.projectRoot 
        });
        console.log(`  ${test.valid ? '‚úÖ' : '‚ùå'} "${test.msg}" - ${test.valid ? 'valid' : 'should be invalid'}`);
      } catch (error) {
        console.log(`  ${test.valid ? '‚ùå' : '‚úÖ'} "${test.msg}" - ${test.valid ? 'should be valid' : 'invalid'}`);
      }
    }

    // Test format check
    console.log('\nüé® Testing format verification...');
    try {
      execSync('npm run format:check', { stdio: 'pipe', cwd: this.projectRoot });
      console.log('  ‚úÖ Format check works');
    } catch (error) {
      console.log('  ‚ö†Ô∏è Format check found issues (expected if code needs formatting)');
    }

    console.log('\nüéâ Hook testing completed!');
  }

  /**
   * Show current hooks status
   */
  async showStatus() {
    console.log('üìä Git Hooks Status\n');

    // Git repository status
    const isGitRepo = fs.existsSync(path.join(this.projectRoot, '.git'));
    console.log(`üîß Git Repository: ${isGitRepo ? '‚úÖ Yes' : '‚ùå No'}`);

    // Husky status
    const huskyExists = fs.existsSync(this.huskyDir);
    console.log(`üé£ Husky Directory: ${huskyExists ? '‚úÖ Exists' : '‚ùå Missing'}`);

    if (huskyExists) {
      console.log('\nüìã Hook Files:');
      for (const hook of this.hooks) {
        const hookPath = path.join(this.huskyDir, hook);
        const exists = fs.existsSync(hookPath);
        
        if (exists) {
          const stats = fs.statSync(hookPath);
          const isExecutable = (stats.mode & parseInt('111', 8)) !== 0;
          console.log(`  ${hook}: ‚úÖ ${isExecutable ? '(executable)' : '(not executable)'}`);
        } else {
          console.log(`  ${hook}: ‚ùå Missing`);
        }
      }
    }

    // Package.json scripts
    console.log('\nüì¶ Package.json:');
    const packagePath = path.join(this.projectRoot, 'package.json');
    if (fs.existsSync(packagePath)) {
      const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
      
      console.log(`  prepare script: ${packageJson.scripts?.prepare ? '‚úÖ Configured' : '‚ùå Missing'}`);
      console.log(`  lint-staged config: ${packageJson['lint-staged'] ? '‚úÖ Configured' : '‚ùå Missing'}`);
    }
  }

  /**
   * Show help information
   */
  showHelp() {
    console.log('üé£ Boukii Git Hooks Manager\n');
    console.log('Usage: node scripts/git-hooks-manager.js <command>\n');
    console.log('Commands:');
    console.log('  install   Install and configure Git hooks');
    console.log('  validate  Validate existing hooks');
    console.log('  test      Test hooks without committing');
    console.log('  status    Show current hooks status');
    console.log('\nExamples:');
    console.log('  npm run hooks:install');
    console.log('  npm run hooks:validate');
    console.log('  npm run hooks:test');
    console.log('  npm run hooks:status');
  }
}

// Execute if called directly
if (require.main === module) {
  new GitHooksManager().run();
}

module.exports = GitHooksManager;